// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "github.com/quachhoang2002/Music-Library/pkg/mongo"

	mongo_drivermongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

type Collection_Expecter struct {
	mock *mock.Mock
}

func (_m *Collection) EXPECT() *Collection_Expecter {
	return &Collection_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, pipeline
func (_m *Collection) Aggregate(ctx context.Context, pipeline interface{}) (mongo.Cursor, error) {
	ret := _m.Called(ctx, pipeline)

	var r0 mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (mongo.Cursor, error)); ok {
		return rf(ctx, pipeline)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mongo.Cursor); ok {
		r0 = rf(ctx, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type Collection_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
func (_e *Collection_Expecter) Aggregate(ctx interface{}, pipeline interface{}) *Collection_Aggregate_Call {
	return &Collection_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, pipeline)}
}

func (_c *Collection_Aggregate_Call) Run(run func(ctx context.Context, pipeline interface{})) *Collection_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Collection_Aggregate_Call) Return(_a0 mongo.Cursor, _a1 error) *Collection_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Aggregate_Call) RunAndReturn(run func(context.Context, interface{}) (mongo.Cursor, error)) *Collection_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CountDocuments provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) CountDocuments(ctx context.Context, filter interface{}, opts ...*options.CountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) (int64, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type Collection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.CountOptions
func (_e *Collection_Expecter) CountDocuments(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_CountDocuments_Call {
	return &Collection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_CountDocuments_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.CountOptions)) *Collection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CountOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CountOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_CountDocuments_Call) Return(_a0 int64, _a1 error) *Collection_CountDocuments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_CountDocuments_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.CountOptions) (int64, error)) *Collection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, filter
func (_m *Collection) DeleteOne(ctx context.Context, filter interface{}) (int64, error) {
	ret := _m.Called(ctx, filter)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type Collection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
func (_e *Collection_Expecter) DeleteOne(ctx interface{}, filter interface{}) *Collection_DeleteOne_Call {
	return &Collection_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, filter)}
}

func (_c *Collection_DeleteOne_Call) Run(run func(ctx context.Context, filter interface{})) *Collection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Collection_DeleteOne_Call) Return(_a0 int64, _a1 error) *Collection_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_DeleteOne_Call) RunAndReturn(run func(context.Context, interface{}) (int64, error)) *Collection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) (mongo.Cursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) mongo.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type Collection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOptions
func (_e *Collection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_Find_Call {
	return &Collection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_Find_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOptions)) *Collection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_Find_Call) Return(_a0 mongo.Cursor, _a1 error) *Collection_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Find_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOptions) (mongo.Cursor, error)) *Collection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter
func (_m *Collection) FindOne(ctx context.Context, filter interface{}) mongo.SingleResult {
	ret := _m.Called(ctx, filter)

	var r0 mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mongo.SingleResult); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResult)
		}
	}

	return r0
}

// Collection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type Collection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
func (_e *Collection_Expecter) FindOne(ctx interface{}, filter interface{}) *Collection_FindOne_Call {
	return &Collection_FindOne_Call{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *Collection_FindOne_Call) Run(run func(ctx context.Context, filter interface{})) *Collection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Collection_FindOne_Call) Return(_a0 mongo.SingleResult) *Collection_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_FindOne_Call) RunAndReturn(run func(context.Context, interface{}) mongo.SingleResult) *Collection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function with given fields: ctx, document
func (_m *Collection) InsertMany(ctx context.Context, document []interface{}) ([]interface{}, error) {
	ret := _m.Called(ctx, document)

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) ([]interface{}, error)); ok {
		return rf(ctx, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) []interface{}); ok {
		r0 = rf(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []interface{}) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type Collection_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - document []interface{}
func (_e *Collection_Expecter) InsertMany(ctx interface{}, document interface{}) *Collection_InsertMany_Call {
	return &Collection_InsertMany_Call{Call: _e.mock.On("InsertMany", ctx, document)}
}

func (_c *Collection_InsertMany_Call) Run(run func(ctx context.Context, document []interface{})) *Collection_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]interface{}))
	})
	return _c
}

func (_c *Collection_InsertMany_Call) Return(_a0 []interface{}, _a1 error) *Collection_InsertMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_InsertMany_Call) RunAndReturn(run func(context.Context, []interface{}) ([]interface{}, error)) *Collection_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, document
func (_m *Collection) InsertOne(ctx context.Context, document interface{}) (interface{}, error) {
	ret := _m.Called(ctx, document)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type Collection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document interface{}
func (_e *Collection_Expecter) InsertOne(ctx interface{}, document interface{}) *Collection_InsertOne_Call {
	return &Collection_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, document)}
}

func (_c *Collection_InsertOne_Call) Run(run func(ctx context.Context, document interface{})) *Collection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Collection_InsertOne_Call) Return(_a0 interface{}, _a1 error) *Collection_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_InsertOne_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *Collection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function with given fields: ctx, filter, update, opts
func (_m *Collection) UpdateMany(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo_drivermongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo_drivermongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo_drivermongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo_drivermongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo_drivermongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type Collection_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *Collection_Expecter) UpdateMany(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *Collection_UpdateMany_Call {
	return &Collection_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *Collection_UpdateMany_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *Collection_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_UpdateMany_Call) Return(_a0 *mongo_drivermongo.UpdateResult, _a1 error) *Collection_UpdateMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_UpdateMany_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo_drivermongo.UpdateResult, error)) *Collection_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, filter, update, opts
func (_m *Collection) UpdateOne(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo_drivermongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo_drivermongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo_drivermongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo_drivermongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo_drivermongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type Collection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *Collection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *Collection_UpdateOne_Call {
	return &Collection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *Collection_UpdateOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *Collection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_UpdateOne_Call) Return(_a0 *mongo_drivermongo.UpdateResult, _a1 error) *Collection_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_UpdateOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo_drivermongo.UpdateResult, error)) *Collection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCollection interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollection creates a new instance of Collection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollection(t mockConstructorTestingTNewCollection) *Collection {
	mock := &Collection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
