// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SingleResult is an autogenerated mock type for the SingleResult type
type SingleResult struct {
	mock.Mock
}

type SingleResult_Expecter struct {
	mock *mock.Mock
}

func (_m *SingleResult) EXPECT() *SingleResult_Expecter {
	return &SingleResult_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: _a0
func (_m *SingleResult) Decode(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SingleResult_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type SingleResult_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *SingleResult_Expecter) Decode(_a0 interface{}) *SingleResult_Decode_Call {
	return &SingleResult_Decode_Call{Call: _e.mock.On("Decode", _a0)}
}

func (_c *SingleResult_Decode_Call) Run(run func(_a0 interface{})) *SingleResult_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *SingleResult_Decode_Call) Return(_a0 error) *SingleResult_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SingleResult_Decode_Call) RunAndReturn(run func(interface{}) error) *SingleResult_Decode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSingleResult interface {
	mock.TestingT
	Cleanup(func())
}

// NewSingleResult creates a new instance of SingleResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSingleResult(t mockConstructorTestingTNewSingleResult) *SingleResult {
	mock := &SingleResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
