// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Cursor is an autogenerated mock type for the Cursor type
type Cursor struct {
	mock.Mock
}

type Cursor_Expecter struct {
	mock *mock.Mock
}

func (_m *Cursor) EXPECT() *Cursor_Expecter {
	return &Cursor_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: _a0, _a1
func (_m *Cursor) All(_a0 context.Context, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cursor_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Cursor_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *Cursor_Expecter) All(_a0 interface{}, _a1 interface{}) *Cursor_All_Call {
	return &Cursor_All_Call{Call: _e.mock.On("All", _a0, _a1)}
}

func (_c *Cursor_All_Call) Run(run func(_a0 context.Context, _a1 interface{})) *Cursor_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Cursor_All_Call) Return(_a0 error) *Cursor_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cursor_All_Call) RunAndReturn(run func(context.Context, interface{}) error) *Cursor_All_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: _a0
func (_m *Cursor) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cursor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Cursor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Cursor_Expecter) Close(_a0 interface{}) *Cursor_Close_Call {
	return &Cursor_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *Cursor_Close_Call) Run(run func(_a0 context.Context)) *Cursor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cursor_Close_Call) Return(_a0 error) *Cursor_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cursor_Close_Call) RunAndReturn(run func(context.Context) error) *Cursor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function with given fields: _a0
func (_m *Cursor) Decode(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cursor_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type Cursor_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *Cursor_Expecter) Decode(_a0 interface{}) *Cursor_Decode_Call {
	return &Cursor_Decode_Call{Call: _e.mock.On("Decode", _a0)}
}

func (_c *Cursor_Decode_Call) Run(run func(_a0 interface{})) *Cursor_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Cursor_Decode_Call) Return(_a0 error) *Cursor_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cursor_Decode_Call) RunAndReturn(run func(interface{}) error) *Cursor_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields: _a0
func (_m *Cursor) Next(_a0 context.Context) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Cursor_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type Cursor_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Cursor_Expecter) Next(_a0 interface{}) *Cursor_Next_Call {
	return &Cursor_Next_Call{Call: _e.mock.On("Next", _a0)}
}

func (_c *Cursor_Next_Call) Run(run func(_a0 context.Context)) *Cursor_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cursor_Next_Call) Return(_a0 bool) *Cursor_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cursor_Next_Call) RunAndReturn(run func(context.Context) bool) *Cursor_Next_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCursor interface {
	mock.TestingT
	Cleanup(func())
}

// NewCursor creates a new instance of Cursor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCursor(t mockConstructorTestingTNewCursor) *Cursor {
	mock := &Cursor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
